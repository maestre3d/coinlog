// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/maestre3d/coinlog"
	"github.com/maestre3d/coinlog/domain/card"
	"github.com/maestre3d/coinlog/domain/contact"
	"github.com/maestre3d/coinlog/domain/financialaccount"
	"github.com/maestre3d/coinlog/domain/user"
	"github.com/maestre3d/coinlog/storage/sql"
	"github.com/maestre3d/coinlog/transport/http"
)

// Injectors from wire.go:

func NewCoinlogHTTP() (*CoinlogHTTP, func(), error) {
	config := coinlog.NewConfig()
	httpConfig := http.NewConfig()
	sqlConfig := sql.NewConfig()
	diCoinlogHTTPConfig := coinlogHTTPConfig{
		Application: config,
		Server:      httpConfig,
		Database:    sqlConfig,
	}
	healthcheckController := http.NewHealthcheckController()
	client, cleanup, err := sql.NewEntClient(sqlConfig)
	if err != nil {
		return nil, nil, err
	}
	userStorage := sql.NewUserStorage(client)
	service := user.NewService(userStorage)
	userController := http.NewUserController(service)
	contactStorage := sql.NewContactStorage(client)
	contactService := contact.NewService(contactStorage)
	contactController := http.NewContactController(contactService)
	financialAccountStorage := sql.NewFinancialAccountStorage(client)
	financialaccountService := financialaccount.NewService(financialAccountStorage)
	financialAccountController := http.NewFinancialController(financialaccountService)
	cardStorage := sql.NewCardStorage(client)
	cardService := card.NewService(cardStorage, financialAccountStorage)
	cardController := http.NewCardController(cardService)
	diHttpCtrl := httpCtrl{
		Healthcheck: healthcheckController,
		User:        userController,
		Contact:     contactController,
		FinAccount:  financialAccountController,
		Card:        cardController,
	}
	controllerMapper := provideHttpRoutes(diCoinlogHTTPConfig, diHttpCtrl)
	echo := http.NewEcho(httpConfig, controllerMapper)
	coinlogHTTP := &CoinlogHTTP{
		Config: diCoinlogHTTPConfig,
		Echo:   echo,
	}
	return coinlogHTTP, func() {
		cleanup()
	}, nil
}

// wire.go:

var kernelCfgSet = wire.NewSet(coinlog.NewConfig, http.NewConfig, sql.NewConfig, wire.Struct(new(coinlogHTTPConfig), "*"))

var userSet = wire.NewSet(wire.Bind(new(user.Repository), new(sql.UserStorage)), sql.NewUserStorage, user.NewService, http.NewUserController)

var contactSet = wire.NewSet(wire.Bind(new(contact.Repository), new(sql.ContactStorage)), sql.NewContactStorage, contact.NewService, http.NewContactController)

var finAccountSet = wire.NewSet(wire.Bind(new(financialaccount.Repository), new(sql.FinancialAccountStorage)), sql.NewFinancialAccountStorage, financialaccount.NewService, http.NewFinancialController)

var cardSet = wire.NewSet(wire.Bind(new(card.Repository), new(sql.CardStorage)), sql.NewCardStorage, card.NewService, http.NewCardController)

// Holds all controllers for HTTP protocol, wire auto-binds inner deps.
type httpCtrl struct {
	//Liveness controller.LivenessHTTP
	Healthcheck http.HealthcheckController
	User        http.UserController
	Contact     http.ContactController
	FinAccount  http.FinancialAccountController
	Card        http.CardController
}

func provideHttpRoutes(cfg coinlogHTTPConfig, ctrls httpCtrl) *http.ControllerMapper {
	mapper := http.NewControllerMapper(cfg.Application, cfg.Server)

	mapper.Add(
		ctrls.Healthcheck,
		ctrls.User,
		ctrls.Contact,
		ctrls.FinAccount,
		ctrls.Card,
	)
	return mapper
}
