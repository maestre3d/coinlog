// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CardsColumns holds the columns for the "cards" table.
	CardsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "is_active", Type: field.TypeBool},
		{Name: "version", Type: field.TypeUint32},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "display_name", Type: field.TypeString},
		{Name: "bank_name", Type: field.TypeString, Nullable: true},
		{Name: "last_digits", Type: field.TypeUint16, Nullable: true},
		{Name: "balance", Type: field.TypeFloat64},
		{Name: "balance_limit", Type: field.TypeFloat64},
		{Name: "currency_code", Type: field.TypeString},
		{Name: "card_type", Type: field.TypeString},
		{Name: "financial_account_id", Type: field.TypeString, Nullable: true},
		{Name: "user_cards", Type: field.TypeString},
	}
	// CardsTable holds the schema information for the "cards" table.
	CardsTable = &schema.Table{
		Name:       "cards",
		Columns:    CardsColumns,
		PrimaryKey: []*schema.Column{CardsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cards_financial_accounts_cards",
				Columns:    []*schema.Column{CardsColumns[12]},
				RefColumns: []*schema.Column{FinancialAccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "cards_users_cards",
				Columns:    []*schema.Column{CardsColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ContactsColumns holds the columns for the "contacts" table.
	ContactsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "is_active", Type: field.TypeBool},
		{Name: "version", Type: field.TypeUint32},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "display_name", Type: field.TypeString},
		{Name: "image_url", Type: field.TypeString, Nullable: true},
		{Name: "user_contacts", Type: field.TypeString},
		{Name: "linked_to_user", Type: field.TypeString, Nullable: true},
	}
	// ContactsTable holds the schema information for the "contacts" table.
	ContactsTable = &schema.Table{
		Name:       "contacts",
		Columns:    ContactsColumns,
		PrimaryKey: []*schema.Column{ContactsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "contacts_users_contacts",
				Columns:    []*schema.Column{ContactsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "contacts_users_contact_links",
				Columns:    []*schema.Column{ContactsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// FinancialAccountsColumns holds the columns for the "financial_accounts" table.
	FinancialAccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "is_active", Type: field.TypeBool},
		{Name: "version", Type: field.TypeUint32},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "display_name", Type: field.TypeString},
		{Name: "bank_name", Type: field.TypeString, Nullable: true},
		{Name: "account_type", Type: field.TypeString},
		{Name: "balance", Type: field.TypeFloat64},
		{Name: "currency_code", Type: field.TypeString},
		{Name: "user_financial_accounts", Type: field.TypeString},
	}
	// FinancialAccountsTable holds the schema information for the "financial_accounts" table.
	FinancialAccountsTable = &schema.Table{
		Name:       "financial_accounts",
		Columns:    FinancialAccountsColumns,
		PrimaryKey: []*schema.Column{FinancialAccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "financial_accounts_users_financial_accounts",
				Columns:    []*schema.Column{FinancialAccountsColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "is_active", Type: field.TypeBool},
		{Name: "version", Type: field.TypeUint32},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "display_name", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CardsTable,
		ContactsTable,
		FinancialAccountsTable,
		UsersTable,
	}
)

func init() {
	CardsTable.ForeignKeys[0].RefTable = FinancialAccountsTable
	CardsTable.ForeignKeys[1].RefTable = UsersTable
	ContactsTable.ForeignKeys[0].RefTable = UsersTable
	ContactsTable.ForeignKeys[1].RefTable = UsersTable
	FinancialAccountsTable.ForeignKeys[0].RefTable = UsersTable
}
