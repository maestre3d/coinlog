// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/maestre3d/coinlog/ent/financialaccount"
	"github.com/maestre3d/coinlog/ent/user"
)

// FinancialAccountCreate is the builder for creating a FinancialAccount entity.
type FinancialAccountCreate struct {
	config
	mutation *FinancialAccountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsActive sets the "is_active" field.
func (fac *FinancialAccountCreate) SetIsActive(b bool) *FinancialAccountCreate {
	fac.mutation.SetIsActive(b)
	return fac
}

// SetVersion sets the "version" field.
func (fac *FinancialAccountCreate) SetVersion(u uint32) *FinancialAccountCreate {
	fac.mutation.SetVersion(u)
	return fac
}

// SetCreatedAt sets the "created_at" field.
func (fac *FinancialAccountCreate) SetCreatedAt(t time.Time) *FinancialAccountCreate {
	fac.mutation.SetCreatedAt(t)
	return fac
}

// SetUpdatedAt sets the "updated_at" field.
func (fac *FinancialAccountCreate) SetUpdatedAt(t time.Time) *FinancialAccountCreate {
	fac.mutation.SetUpdatedAt(t)
	return fac
}

// SetDisplayName sets the "display_name" field.
func (fac *FinancialAccountCreate) SetDisplayName(s string) *FinancialAccountCreate {
	fac.mutation.SetDisplayName(s)
	return fac
}

// SetBankName sets the "bank_name" field.
func (fac *FinancialAccountCreate) SetBankName(s string) *FinancialAccountCreate {
	fac.mutation.SetBankName(s)
	return fac
}

// SetNillableBankName sets the "bank_name" field if the given value is not nil.
func (fac *FinancialAccountCreate) SetNillableBankName(s *string) *FinancialAccountCreate {
	if s != nil {
		fac.SetBankName(*s)
	}
	return fac
}

// SetAccountType sets the "account_type" field.
func (fac *FinancialAccountCreate) SetAccountType(s string) *FinancialAccountCreate {
	fac.mutation.SetAccountType(s)
	return fac
}

// SetBalance sets the "balance" field.
func (fac *FinancialAccountCreate) SetBalance(f float64) *FinancialAccountCreate {
	fac.mutation.SetBalance(f)
	return fac
}

// SetCurrencyCode sets the "currency_code" field.
func (fac *FinancialAccountCreate) SetCurrencyCode(s string) *FinancialAccountCreate {
	fac.mutation.SetCurrencyCode(s)
	return fac
}

// SetID sets the "id" field.
func (fac *FinancialAccountCreate) SetID(s string) *FinancialAccountCreate {
	fac.mutation.SetID(s)
	return fac
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (fac *FinancialAccountCreate) SetOwnerID(id string) *FinancialAccountCreate {
	fac.mutation.SetOwnerID(id)
	return fac
}

// SetOwner sets the "owner" edge to the User entity.
func (fac *FinancialAccountCreate) SetOwner(u *User) *FinancialAccountCreate {
	return fac.SetOwnerID(u.ID)
}

// Mutation returns the FinancialAccountMutation object of the builder.
func (fac *FinancialAccountCreate) Mutation() *FinancialAccountMutation {
	return fac.mutation
}

// Save creates the FinancialAccount in the database.
func (fac *FinancialAccountCreate) Save(ctx context.Context) (*FinancialAccount, error) {
	return withHooks[*FinancialAccount, FinancialAccountMutation](ctx, fac.sqlSave, fac.mutation, fac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fac *FinancialAccountCreate) SaveX(ctx context.Context) *FinancialAccount {
	v, err := fac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fac *FinancialAccountCreate) Exec(ctx context.Context) error {
	_, err := fac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fac *FinancialAccountCreate) ExecX(ctx context.Context) {
	if err := fac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fac *FinancialAccountCreate) check() error {
	if _, ok := fac.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "FinancialAccount.is_active"`)}
	}
	if _, ok := fac.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "FinancialAccount.version"`)}
	}
	if _, ok := fac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FinancialAccount.created_at"`)}
	}
	if _, ok := fac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FinancialAccount.updated_at"`)}
	}
	if _, ok := fac.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "FinancialAccount.display_name"`)}
	}
	if v, ok := fac.mutation.DisplayName(); ok {
		if err := financialaccount.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "FinancialAccount.display_name": %w`, err)}
		}
	}
	if _, ok := fac.mutation.AccountType(); !ok {
		return &ValidationError{Name: "account_type", err: errors.New(`ent: missing required field "FinancialAccount.account_type"`)}
	}
	if v, ok := fac.mutation.AccountType(); ok {
		if err := financialaccount.AccountTypeValidator(v); err != nil {
			return &ValidationError{Name: "account_type", err: fmt.Errorf(`ent: validator failed for field "FinancialAccount.account_type": %w`, err)}
		}
	}
	if _, ok := fac.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "FinancialAccount.balance"`)}
	}
	if _, ok := fac.mutation.CurrencyCode(); !ok {
		return &ValidationError{Name: "currency_code", err: errors.New(`ent: missing required field "FinancialAccount.currency_code"`)}
	}
	if v, ok := fac.mutation.CurrencyCode(); ok {
		if err := financialaccount.CurrencyCodeValidator(v); err != nil {
			return &ValidationError{Name: "currency_code", err: fmt.Errorf(`ent: validator failed for field "FinancialAccount.currency_code": %w`, err)}
		}
	}
	if v, ok := fac.mutation.ID(); ok {
		if err := financialaccount.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "FinancialAccount.id": %w`, err)}
		}
	}
	if _, ok := fac.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "FinancialAccount.owner"`)}
	}
	return nil
}

func (fac *FinancialAccountCreate) sqlSave(ctx context.Context) (*FinancialAccount, error) {
	if err := fac.check(); err != nil {
		return nil, err
	}
	_node, _spec := fac.createSpec()
	if err := sqlgraph.CreateNode(ctx, fac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FinancialAccount.ID type: %T", _spec.ID.Value)
		}
	}
	fac.mutation.id = &_node.ID
	fac.mutation.done = true
	return _node, nil
}

func (fac *FinancialAccountCreate) createSpec() (*FinancialAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &FinancialAccount{config: fac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: financialaccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: financialaccount.FieldID,
			},
		}
	)
	_spec.OnConflict = fac.conflict
	if id, ok := fac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fac.mutation.IsActive(); ok {
		_spec.SetField(financialaccount.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := fac.mutation.Version(); ok {
		_spec.SetField(financialaccount.FieldVersion, field.TypeUint32, value)
		_node.Version = value
	}
	if value, ok := fac.mutation.CreatedAt(); ok {
		_spec.SetField(financialaccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fac.mutation.UpdatedAt(); ok {
		_spec.SetField(financialaccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fac.mutation.DisplayName(); ok {
		_spec.SetField(financialaccount.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := fac.mutation.BankName(); ok {
		_spec.SetField(financialaccount.FieldBankName, field.TypeString, value)
		_node.BankName = value
	}
	if value, ok := fac.mutation.AccountType(); ok {
		_spec.SetField(financialaccount.FieldAccountType, field.TypeString, value)
		_node.AccountType = value
	}
	if value, ok := fac.mutation.Balance(); ok {
		_spec.SetField(financialaccount.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if value, ok := fac.mutation.CurrencyCode(); ok {
		_spec.SetField(financialaccount.FieldCurrencyCode, field.TypeString, value)
		_node.CurrencyCode = value
	}
	if nodes := fac.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   financialaccount.OwnerTable,
			Columns: []string{financialaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_financial_accounts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FinancialAccount.Create().
//		SetIsActive(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FinancialAccountUpsert) {
//			SetIsActive(v+v).
//		}).
//		Exec(ctx)
func (fac *FinancialAccountCreate) OnConflict(opts ...sql.ConflictOption) *FinancialAccountUpsertOne {
	fac.conflict = opts
	return &FinancialAccountUpsertOne{
		create: fac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FinancialAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fac *FinancialAccountCreate) OnConflictColumns(columns ...string) *FinancialAccountUpsertOne {
	fac.conflict = append(fac.conflict, sql.ConflictColumns(columns...))
	return &FinancialAccountUpsertOne{
		create: fac,
	}
}

type (
	// FinancialAccountUpsertOne is the builder for "upsert"-ing
	//  one FinancialAccount node.
	FinancialAccountUpsertOne struct {
		create *FinancialAccountCreate
	}

	// FinancialAccountUpsert is the "OnConflict" setter.
	FinancialAccountUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsActive sets the "is_active" field.
func (u *FinancialAccountUpsert) SetIsActive(v bool) *FinancialAccountUpsert {
	u.Set(financialaccount.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *FinancialAccountUpsert) UpdateIsActive() *FinancialAccountUpsert {
	u.SetExcluded(financialaccount.FieldIsActive)
	return u
}

// SetVersion sets the "version" field.
func (u *FinancialAccountUpsert) SetVersion(v uint32) *FinancialAccountUpsert {
	u.Set(financialaccount.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *FinancialAccountUpsert) UpdateVersion() *FinancialAccountUpsert {
	u.SetExcluded(financialaccount.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *FinancialAccountUpsert) AddVersion(v uint32) *FinancialAccountUpsert {
	u.Add(financialaccount.FieldVersion, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FinancialAccountUpsert) SetUpdatedAt(v time.Time) *FinancialAccountUpsert {
	u.Set(financialaccount.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FinancialAccountUpsert) UpdateUpdatedAt() *FinancialAccountUpsert {
	u.SetExcluded(financialaccount.FieldUpdatedAt)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *FinancialAccountUpsert) SetDisplayName(v string) *FinancialAccountUpsert {
	u.Set(financialaccount.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *FinancialAccountUpsert) UpdateDisplayName() *FinancialAccountUpsert {
	u.SetExcluded(financialaccount.FieldDisplayName)
	return u
}

// SetBankName sets the "bank_name" field.
func (u *FinancialAccountUpsert) SetBankName(v string) *FinancialAccountUpsert {
	u.Set(financialaccount.FieldBankName, v)
	return u
}

// UpdateBankName sets the "bank_name" field to the value that was provided on create.
func (u *FinancialAccountUpsert) UpdateBankName() *FinancialAccountUpsert {
	u.SetExcluded(financialaccount.FieldBankName)
	return u
}

// ClearBankName clears the value of the "bank_name" field.
func (u *FinancialAccountUpsert) ClearBankName() *FinancialAccountUpsert {
	u.SetNull(financialaccount.FieldBankName)
	return u
}

// SetAccountType sets the "account_type" field.
func (u *FinancialAccountUpsert) SetAccountType(v string) *FinancialAccountUpsert {
	u.Set(financialaccount.FieldAccountType, v)
	return u
}

// UpdateAccountType sets the "account_type" field to the value that was provided on create.
func (u *FinancialAccountUpsert) UpdateAccountType() *FinancialAccountUpsert {
	u.SetExcluded(financialaccount.FieldAccountType)
	return u
}

// SetBalance sets the "balance" field.
func (u *FinancialAccountUpsert) SetBalance(v float64) *FinancialAccountUpsert {
	u.Set(financialaccount.FieldBalance, v)
	return u
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *FinancialAccountUpsert) UpdateBalance() *FinancialAccountUpsert {
	u.SetExcluded(financialaccount.FieldBalance)
	return u
}

// AddBalance adds v to the "balance" field.
func (u *FinancialAccountUpsert) AddBalance(v float64) *FinancialAccountUpsert {
	u.Add(financialaccount.FieldBalance, v)
	return u
}

// SetCurrencyCode sets the "currency_code" field.
func (u *FinancialAccountUpsert) SetCurrencyCode(v string) *FinancialAccountUpsert {
	u.Set(financialaccount.FieldCurrencyCode, v)
	return u
}

// UpdateCurrencyCode sets the "currency_code" field to the value that was provided on create.
func (u *FinancialAccountUpsert) UpdateCurrencyCode() *FinancialAccountUpsert {
	u.SetExcluded(financialaccount.FieldCurrencyCode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FinancialAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(financialaccount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FinancialAccountUpsertOne) UpdateNewValues() *FinancialAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(financialaccount.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(financialaccount.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FinancialAccount.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FinancialAccountUpsertOne) Ignore() *FinancialAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FinancialAccountUpsertOne) DoNothing() *FinancialAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FinancialAccountCreate.OnConflict
// documentation for more info.
func (u *FinancialAccountUpsertOne) Update(set func(*FinancialAccountUpsert)) *FinancialAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FinancialAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsActive sets the "is_active" field.
func (u *FinancialAccountUpsertOne) SetIsActive(v bool) *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *FinancialAccountUpsertOne) UpdateIsActive() *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.UpdateIsActive()
	})
}

// SetVersion sets the "version" field.
func (u *FinancialAccountUpsertOne) SetVersion(v uint32) *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *FinancialAccountUpsertOne) AddVersion(v uint32) *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *FinancialAccountUpsertOne) UpdateVersion() *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.UpdateVersion()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FinancialAccountUpsertOne) SetUpdatedAt(v time.Time) *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FinancialAccountUpsertOne) UpdateUpdatedAt() *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *FinancialAccountUpsertOne) SetDisplayName(v string) *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *FinancialAccountUpsertOne) UpdateDisplayName() *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.UpdateDisplayName()
	})
}

// SetBankName sets the "bank_name" field.
func (u *FinancialAccountUpsertOne) SetBankName(v string) *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.SetBankName(v)
	})
}

// UpdateBankName sets the "bank_name" field to the value that was provided on create.
func (u *FinancialAccountUpsertOne) UpdateBankName() *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.UpdateBankName()
	})
}

// ClearBankName clears the value of the "bank_name" field.
func (u *FinancialAccountUpsertOne) ClearBankName() *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.ClearBankName()
	})
}

// SetAccountType sets the "account_type" field.
func (u *FinancialAccountUpsertOne) SetAccountType(v string) *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.SetAccountType(v)
	})
}

// UpdateAccountType sets the "account_type" field to the value that was provided on create.
func (u *FinancialAccountUpsertOne) UpdateAccountType() *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.UpdateAccountType()
	})
}

// SetBalance sets the "balance" field.
func (u *FinancialAccountUpsertOne) SetBalance(v float64) *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *FinancialAccountUpsertOne) AddBalance(v float64) *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *FinancialAccountUpsertOne) UpdateBalance() *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.UpdateBalance()
	})
}

// SetCurrencyCode sets the "currency_code" field.
func (u *FinancialAccountUpsertOne) SetCurrencyCode(v string) *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.SetCurrencyCode(v)
	})
}

// UpdateCurrencyCode sets the "currency_code" field to the value that was provided on create.
func (u *FinancialAccountUpsertOne) UpdateCurrencyCode() *FinancialAccountUpsertOne {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.UpdateCurrencyCode()
	})
}

// Exec executes the query.
func (u *FinancialAccountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FinancialAccountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FinancialAccountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FinancialAccountUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FinancialAccountUpsertOne.ID is not supported by MySQL driver. Use FinancialAccountUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FinancialAccountUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FinancialAccountCreateBulk is the builder for creating many FinancialAccount entities in bulk.
type FinancialAccountCreateBulk struct {
	config
	builders []*FinancialAccountCreate
	conflict []sql.ConflictOption
}

// Save creates the FinancialAccount entities in the database.
func (facb *FinancialAccountCreateBulk) Save(ctx context.Context) ([]*FinancialAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(facb.builders))
	nodes := make([]*FinancialAccount, len(facb.builders))
	mutators := make([]Mutator, len(facb.builders))
	for i := range facb.builders {
		func(i int, root context.Context) {
			builder := facb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FinancialAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, facb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = facb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, facb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, facb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (facb *FinancialAccountCreateBulk) SaveX(ctx context.Context) []*FinancialAccount {
	v, err := facb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (facb *FinancialAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := facb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (facb *FinancialAccountCreateBulk) ExecX(ctx context.Context) {
	if err := facb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FinancialAccount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FinancialAccountUpsert) {
//			SetIsActive(v+v).
//		}).
//		Exec(ctx)
func (facb *FinancialAccountCreateBulk) OnConflict(opts ...sql.ConflictOption) *FinancialAccountUpsertBulk {
	facb.conflict = opts
	return &FinancialAccountUpsertBulk{
		create: facb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FinancialAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (facb *FinancialAccountCreateBulk) OnConflictColumns(columns ...string) *FinancialAccountUpsertBulk {
	facb.conflict = append(facb.conflict, sql.ConflictColumns(columns...))
	return &FinancialAccountUpsertBulk{
		create: facb,
	}
}

// FinancialAccountUpsertBulk is the builder for "upsert"-ing
// a bulk of FinancialAccount nodes.
type FinancialAccountUpsertBulk struct {
	create *FinancialAccountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FinancialAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(financialaccount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FinancialAccountUpsertBulk) UpdateNewValues() *FinancialAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(financialaccount.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(financialaccount.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FinancialAccount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FinancialAccountUpsertBulk) Ignore() *FinancialAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FinancialAccountUpsertBulk) DoNothing() *FinancialAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FinancialAccountCreateBulk.OnConflict
// documentation for more info.
func (u *FinancialAccountUpsertBulk) Update(set func(*FinancialAccountUpsert)) *FinancialAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FinancialAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsActive sets the "is_active" field.
func (u *FinancialAccountUpsertBulk) SetIsActive(v bool) *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *FinancialAccountUpsertBulk) UpdateIsActive() *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.UpdateIsActive()
	})
}

// SetVersion sets the "version" field.
func (u *FinancialAccountUpsertBulk) SetVersion(v uint32) *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *FinancialAccountUpsertBulk) AddVersion(v uint32) *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *FinancialAccountUpsertBulk) UpdateVersion() *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.UpdateVersion()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FinancialAccountUpsertBulk) SetUpdatedAt(v time.Time) *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FinancialAccountUpsertBulk) UpdateUpdatedAt() *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *FinancialAccountUpsertBulk) SetDisplayName(v string) *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *FinancialAccountUpsertBulk) UpdateDisplayName() *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.UpdateDisplayName()
	})
}

// SetBankName sets the "bank_name" field.
func (u *FinancialAccountUpsertBulk) SetBankName(v string) *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.SetBankName(v)
	})
}

// UpdateBankName sets the "bank_name" field to the value that was provided on create.
func (u *FinancialAccountUpsertBulk) UpdateBankName() *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.UpdateBankName()
	})
}

// ClearBankName clears the value of the "bank_name" field.
func (u *FinancialAccountUpsertBulk) ClearBankName() *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.ClearBankName()
	})
}

// SetAccountType sets the "account_type" field.
func (u *FinancialAccountUpsertBulk) SetAccountType(v string) *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.SetAccountType(v)
	})
}

// UpdateAccountType sets the "account_type" field to the value that was provided on create.
func (u *FinancialAccountUpsertBulk) UpdateAccountType() *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.UpdateAccountType()
	})
}

// SetBalance sets the "balance" field.
func (u *FinancialAccountUpsertBulk) SetBalance(v float64) *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *FinancialAccountUpsertBulk) AddBalance(v float64) *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *FinancialAccountUpsertBulk) UpdateBalance() *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.UpdateBalance()
	})
}

// SetCurrencyCode sets the "currency_code" field.
func (u *FinancialAccountUpsertBulk) SetCurrencyCode(v string) *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.SetCurrencyCode(v)
	})
}

// UpdateCurrencyCode sets the "currency_code" field to the value that was provided on create.
func (u *FinancialAccountUpsertBulk) UpdateCurrencyCode() *FinancialAccountUpsertBulk {
	return u.Update(func(s *FinancialAccountUpsert) {
		s.UpdateCurrencyCode()
	})
}

// Exec executes the query.
func (u *FinancialAccountUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FinancialAccountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FinancialAccountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FinancialAccountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
