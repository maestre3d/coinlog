// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/maestre3d/coinlog/ent/financialaccount"
	"github.com/maestre3d/coinlog/ent/user"
)

// FinancialAccount is the model entity for the FinancialAccount schema.
type FinancialAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// Version holds the value of the "version" field.
	Version uint32 `json:"version,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// BankName holds the value of the "bank_name" field.
	BankName string `json:"bank_name,omitempty"`
	// AccountType holds the value of the "account_type" field.
	AccountType string `json:"account_type,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance float64 `json:"balance,omitempty"`
	// CurrencyCode holds the value of the "currency_code" field.
	CurrencyCode string `json:"currency_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FinancialAccountQuery when eager-loading is set.
	Edges                   FinancialAccountEdges `json:"edges"`
	user_financial_accounts *string
}

// FinancialAccountEdges holds the relations/edges for other nodes in the graph.
type FinancialAccountEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FinancialAccountEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FinancialAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case financialaccount.FieldIsActive:
			values[i] = new(sql.NullBool)
		case financialaccount.FieldBalance:
			values[i] = new(sql.NullFloat64)
		case financialaccount.FieldVersion:
			values[i] = new(sql.NullInt64)
		case financialaccount.FieldID, financialaccount.FieldDisplayName, financialaccount.FieldBankName, financialaccount.FieldAccountType, financialaccount.FieldCurrencyCode:
			values[i] = new(sql.NullString)
		case financialaccount.FieldCreatedAt, financialaccount.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case financialaccount.ForeignKeys[0]: // user_financial_accounts
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FinancialAccount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FinancialAccount fields.
func (fa *FinancialAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case financialaccount.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				fa.ID = value.String
			}
		case financialaccount.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				fa.IsActive = value.Bool
			}
		case financialaccount.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				fa.Version = uint32(value.Int64)
			}
		case financialaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fa.CreatedAt = value.Time
			}
		case financialaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fa.UpdatedAt = value.Time
			}
		case financialaccount.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				fa.DisplayName = value.String
			}
		case financialaccount.FieldBankName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_name", values[i])
			} else if value.Valid {
				fa.BankName = value.String
			}
		case financialaccount.FieldAccountType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_type", values[i])
			} else if value.Valid {
				fa.AccountType = value.String
			}
		case financialaccount.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				fa.Balance = value.Float64
			}
		case financialaccount.FieldCurrencyCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency_code", values[i])
			} else if value.Valid {
				fa.CurrencyCode = value.String
			}
		case financialaccount.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_financial_accounts", values[i])
			} else if value.Valid {
				fa.user_financial_accounts = new(string)
				*fa.user_financial_accounts = value.String
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the FinancialAccount entity.
func (fa *FinancialAccount) QueryOwner() *UserQuery {
	return (&FinancialAccountClient{config: fa.config}).QueryOwner(fa)
}

// Update returns a builder for updating this FinancialAccount.
// Note that you need to call FinancialAccount.Unwrap() before calling this method if this FinancialAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (fa *FinancialAccount) Update() *FinancialAccountUpdateOne {
	return (&FinancialAccountClient{config: fa.config}).UpdateOne(fa)
}

// Unwrap unwraps the FinancialAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fa *FinancialAccount) Unwrap() *FinancialAccount {
	_tx, ok := fa.config.driver.(*txDriver)
	if !ok {
		panic("ent: FinancialAccount is not a transactional entity")
	}
	fa.config.driver = _tx.drv
	return fa
}

// String implements the fmt.Stringer.
func (fa *FinancialAccount) String() string {
	var builder strings.Builder
	builder.WriteString("FinancialAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fa.ID))
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", fa.IsActive))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", fa.Version))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(fa.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("bank_name=")
	builder.WriteString(fa.BankName)
	builder.WriteString(", ")
	builder.WriteString("account_type=")
	builder.WriteString(fa.AccountType)
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", fa.Balance))
	builder.WriteString(", ")
	builder.WriteString("currency_code=")
	builder.WriteString(fa.CurrencyCode)
	builder.WriteByte(')')
	return builder.String()
}

// FinancialAccounts is a parsable slice of FinancialAccount.
type FinancialAccounts []*FinancialAccount

func (fa FinancialAccounts) config(cfg config) {
	for _i := range fa {
		fa[_i].config = cfg
	}
}
