// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/maestre3d/coinlog/ent/contact"
	"github.com/maestre3d/coinlog/ent/financialaccount"
	"github.com/maestre3d/coinlog/ent/schema"
	"github.com/maestre3d/coinlog/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	contactFields := schema.Contact{}.Fields()
	_ = contactFields
	// contactDescDisplayName is the schema descriptor for display_name field.
	contactDescDisplayName := contactFields[1].Descriptor()
	// contact.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	contact.DisplayNameValidator = contactDescDisplayName.Validators[0].(func(string) error)
	// contactDescID is the schema descriptor for id field.
	contactDescID := contactFields[0].Descriptor()
	// contact.IDValidator is a validator for the "id" field. It is called by the builders before save.
	contact.IDValidator = contactDescID.Validators[0].(func(string) error)
	financialaccountFields := schema.FinancialAccount{}.Fields()
	_ = financialaccountFields
	// financialaccountDescDisplayName is the schema descriptor for display_name field.
	financialaccountDescDisplayName := financialaccountFields[1].Descriptor()
	// financialaccount.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	financialaccount.DisplayNameValidator = financialaccountDescDisplayName.Validators[0].(func(string) error)
	// financialaccountDescAccountType is the schema descriptor for account_type field.
	financialaccountDescAccountType := financialaccountFields[3].Descriptor()
	// financialaccount.AccountTypeValidator is a validator for the "account_type" field. It is called by the builders before save.
	financialaccount.AccountTypeValidator = financialaccountDescAccountType.Validators[0].(func(string) error)
	// financialaccountDescCurrencyCode is the schema descriptor for currency_code field.
	financialaccountDescCurrencyCode := financialaccountFields[5].Descriptor()
	// financialaccount.CurrencyCodeValidator is a validator for the "currency_code" field. It is called by the builders before save.
	financialaccount.CurrencyCodeValidator = financialaccountDescCurrencyCode.Validators[0].(func(string) error)
	// financialaccountDescID is the schema descriptor for id field.
	financialaccountDescID := financialaccountFields[0].Descriptor()
	// financialaccount.IDValidator is a validator for the "id" field. It is called by the builders before save.
	financialaccount.IDValidator = financialaccountDescID.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescDisplayName is the schema descriptor for display_name field.
	userDescDisplayName := userFields[1].Descriptor()
	// user.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	user.DisplayNameValidator = userDescDisplayName.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = userDescID.Validators[0].(func(string) error)
}
