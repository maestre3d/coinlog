// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/maestre3d/coinlog/ent/card"
	"github.com/maestre3d/coinlog/ent/financialaccount"
	"github.com/maestre3d/coinlog/ent/user"
)

// CardCreate is the builder for creating a Card entity.
type CardCreate struct {
	config
	mutation *CardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsActive sets the "is_active" field.
func (cc *CardCreate) SetIsActive(b bool) *CardCreate {
	cc.mutation.SetIsActive(b)
	return cc
}

// SetVersion sets the "version" field.
func (cc *CardCreate) SetVersion(u uint32) *CardCreate {
	cc.mutation.SetVersion(u)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CardCreate) SetCreatedAt(t time.Time) *CardCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CardCreate) SetUpdatedAt(t time.Time) *CardCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetFinancialAccountID sets the "financial_account_id" field.
func (cc *CardCreate) SetFinancialAccountID(s string) *CardCreate {
	cc.mutation.SetFinancialAccountID(s)
	return cc
}

// SetNillableFinancialAccountID sets the "financial_account_id" field if the given value is not nil.
func (cc *CardCreate) SetNillableFinancialAccountID(s *string) *CardCreate {
	if s != nil {
		cc.SetFinancialAccountID(*s)
	}
	return cc
}

// SetDisplayName sets the "display_name" field.
func (cc *CardCreate) SetDisplayName(s string) *CardCreate {
	cc.mutation.SetDisplayName(s)
	return cc
}

// SetBankName sets the "bank_name" field.
func (cc *CardCreate) SetBankName(s string) *CardCreate {
	cc.mutation.SetBankName(s)
	return cc
}

// SetNillableBankName sets the "bank_name" field if the given value is not nil.
func (cc *CardCreate) SetNillableBankName(s *string) *CardCreate {
	if s != nil {
		cc.SetBankName(*s)
	}
	return cc
}

// SetLastDigits sets the "last_digits" field.
func (cc *CardCreate) SetLastDigits(u uint16) *CardCreate {
	cc.mutation.SetLastDigits(u)
	return cc
}

// SetNillableLastDigits sets the "last_digits" field if the given value is not nil.
func (cc *CardCreate) SetNillableLastDigits(u *uint16) *CardCreate {
	if u != nil {
		cc.SetLastDigits(*u)
	}
	return cc
}

// SetBalance sets the "balance" field.
func (cc *CardCreate) SetBalance(f float64) *CardCreate {
	cc.mutation.SetBalance(f)
	return cc
}

// SetBalanceLimit sets the "balance_limit" field.
func (cc *CardCreate) SetBalanceLimit(f float64) *CardCreate {
	cc.mutation.SetBalanceLimit(f)
	return cc
}

// SetCurrencyCode sets the "currency_code" field.
func (cc *CardCreate) SetCurrencyCode(s string) *CardCreate {
	cc.mutation.SetCurrencyCode(s)
	return cc
}

// SetCardType sets the "card_type" field.
func (cc *CardCreate) SetCardType(s string) *CardCreate {
	cc.mutation.SetCardType(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CardCreate) SetID(s string) *CardCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cc *CardCreate) SetUserID(id string) *CardCreate {
	cc.mutation.SetUserID(id)
	return cc
}

// SetUser sets the "user" edge to the User entity.
func (cc *CardCreate) SetUser(u *User) *CardCreate {
	return cc.SetUserID(u.ID)
}

// SetFinancialAccount sets the "financial_account" edge to the FinancialAccount entity.
func (cc *CardCreate) SetFinancialAccount(f *FinancialAccount) *CardCreate {
	return cc.SetFinancialAccountID(f.ID)
}

// Mutation returns the CardMutation object of the builder.
func (cc *CardCreate) Mutation() *CardMutation {
	return cc.mutation
}

// Save creates the Card in the database.
func (cc *CardCreate) Save(ctx context.Context) (*Card, error) {
	return withHooks[*Card, CardMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CardCreate) SaveX(ctx context.Context) *Card {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CardCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CardCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CardCreate) check() error {
	if _, ok := cc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Card.is_active"`)}
	}
	if _, ok := cc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Card.version"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Card.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Card.updated_at"`)}
	}
	if _, ok := cc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "Card.display_name"`)}
	}
	if v, ok := cc.mutation.DisplayName(); ok {
		if err := card.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "Card.display_name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "Card.balance"`)}
	}
	if _, ok := cc.mutation.BalanceLimit(); !ok {
		return &ValidationError{Name: "balance_limit", err: errors.New(`ent: missing required field "Card.balance_limit"`)}
	}
	if _, ok := cc.mutation.CurrencyCode(); !ok {
		return &ValidationError{Name: "currency_code", err: errors.New(`ent: missing required field "Card.currency_code"`)}
	}
	if v, ok := cc.mutation.CurrencyCode(); ok {
		if err := card.CurrencyCodeValidator(v); err != nil {
			return &ValidationError{Name: "currency_code", err: fmt.Errorf(`ent: validator failed for field "Card.currency_code": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CardType(); !ok {
		return &ValidationError{Name: "card_type", err: errors.New(`ent: missing required field "Card.card_type"`)}
	}
	if v, ok := cc.mutation.CardType(); ok {
		if err := card.CardTypeValidator(v); err != nil {
			return &ValidationError{Name: "card_type", err: fmt.Errorf(`ent: validator failed for field "Card.card_type": %w`, err)}
		}
	}
	if v, ok := cc.mutation.ID(); ok {
		if err := card.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Card.id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Card.user"`)}
	}
	return nil
}

func (cc *CardCreate) sqlSave(ctx context.Context) (*Card, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Card.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CardCreate) createSpec() (*Card, *sqlgraph.CreateSpec) {
	var (
		_node = &Card{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: card.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: card.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.IsActive(); ok {
		_spec.SetField(card.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := cc.mutation.Version(); ok {
		_spec.SetField(card.FieldVersion, field.TypeUint32, value)
		_node.Version = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(card.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(card.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DisplayName(); ok {
		_spec.SetField(card.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := cc.mutation.BankName(); ok {
		_spec.SetField(card.FieldBankName, field.TypeString, value)
		_node.BankName = value
	}
	if value, ok := cc.mutation.LastDigits(); ok {
		_spec.SetField(card.FieldLastDigits, field.TypeUint16, value)
		_node.LastDigits = value
	}
	if value, ok := cc.mutation.Balance(); ok {
		_spec.SetField(card.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if value, ok := cc.mutation.BalanceLimit(); ok {
		_spec.SetField(card.FieldBalanceLimit, field.TypeFloat64, value)
		_node.BalanceLimit = value
	}
	if value, ok := cc.mutation.CurrencyCode(); ok {
		_spec.SetField(card.FieldCurrencyCode, field.TypeString, value)
		_node.CurrencyCode = value
	}
	if value, ok := cc.mutation.CardType(); ok {
		_spec.SetField(card.FieldCardType, field.TypeString, value)
		_node.CardType = value
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.UserTable,
			Columns: []string{card.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_cards = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.FinancialAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.FinancialAccountTable,
			Columns: []string{card.FinancialAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: financialaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FinancialAccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Card.Create().
//		SetIsActive(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CardUpsert) {
//			SetIsActive(v+v).
//		}).
//		Exec(ctx)
func (cc *CardCreate) OnConflict(opts ...sql.ConflictOption) *CardUpsertOne {
	cc.conflict = opts
	return &CardUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Card.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CardCreate) OnConflictColumns(columns ...string) *CardUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CardUpsertOne{
		create: cc,
	}
}

type (
	// CardUpsertOne is the builder for "upsert"-ing
	//  one Card node.
	CardUpsertOne struct {
		create *CardCreate
	}

	// CardUpsert is the "OnConflict" setter.
	CardUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsActive sets the "is_active" field.
func (u *CardUpsert) SetIsActive(v bool) *CardUpsert {
	u.Set(card.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *CardUpsert) UpdateIsActive() *CardUpsert {
	u.SetExcluded(card.FieldIsActive)
	return u
}

// SetVersion sets the "version" field.
func (u *CardUpsert) SetVersion(v uint32) *CardUpsert {
	u.Set(card.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *CardUpsert) UpdateVersion() *CardUpsert {
	u.SetExcluded(card.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *CardUpsert) AddVersion(v uint32) *CardUpsert {
	u.Add(card.FieldVersion, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CardUpsert) SetUpdatedAt(v time.Time) *CardUpsert {
	u.Set(card.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CardUpsert) UpdateUpdatedAt() *CardUpsert {
	u.SetExcluded(card.FieldUpdatedAt)
	return u
}

// SetFinancialAccountID sets the "financial_account_id" field.
func (u *CardUpsert) SetFinancialAccountID(v string) *CardUpsert {
	u.Set(card.FieldFinancialAccountID, v)
	return u
}

// UpdateFinancialAccountID sets the "financial_account_id" field to the value that was provided on create.
func (u *CardUpsert) UpdateFinancialAccountID() *CardUpsert {
	u.SetExcluded(card.FieldFinancialAccountID)
	return u
}

// ClearFinancialAccountID clears the value of the "financial_account_id" field.
func (u *CardUpsert) ClearFinancialAccountID() *CardUpsert {
	u.SetNull(card.FieldFinancialAccountID)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *CardUpsert) SetDisplayName(v string) *CardUpsert {
	u.Set(card.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *CardUpsert) UpdateDisplayName() *CardUpsert {
	u.SetExcluded(card.FieldDisplayName)
	return u
}

// SetBankName sets the "bank_name" field.
func (u *CardUpsert) SetBankName(v string) *CardUpsert {
	u.Set(card.FieldBankName, v)
	return u
}

// UpdateBankName sets the "bank_name" field to the value that was provided on create.
func (u *CardUpsert) UpdateBankName() *CardUpsert {
	u.SetExcluded(card.FieldBankName)
	return u
}

// ClearBankName clears the value of the "bank_name" field.
func (u *CardUpsert) ClearBankName() *CardUpsert {
	u.SetNull(card.FieldBankName)
	return u
}

// SetLastDigits sets the "last_digits" field.
func (u *CardUpsert) SetLastDigits(v uint16) *CardUpsert {
	u.Set(card.FieldLastDigits, v)
	return u
}

// UpdateLastDigits sets the "last_digits" field to the value that was provided on create.
func (u *CardUpsert) UpdateLastDigits() *CardUpsert {
	u.SetExcluded(card.FieldLastDigits)
	return u
}

// AddLastDigits adds v to the "last_digits" field.
func (u *CardUpsert) AddLastDigits(v uint16) *CardUpsert {
	u.Add(card.FieldLastDigits, v)
	return u
}

// ClearLastDigits clears the value of the "last_digits" field.
func (u *CardUpsert) ClearLastDigits() *CardUpsert {
	u.SetNull(card.FieldLastDigits)
	return u
}

// SetBalance sets the "balance" field.
func (u *CardUpsert) SetBalance(v float64) *CardUpsert {
	u.Set(card.FieldBalance, v)
	return u
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *CardUpsert) UpdateBalance() *CardUpsert {
	u.SetExcluded(card.FieldBalance)
	return u
}

// AddBalance adds v to the "balance" field.
func (u *CardUpsert) AddBalance(v float64) *CardUpsert {
	u.Add(card.FieldBalance, v)
	return u
}

// SetBalanceLimit sets the "balance_limit" field.
func (u *CardUpsert) SetBalanceLimit(v float64) *CardUpsert {
	u.Set(card.FieldBalanceLimit, v)
	return u
}

// UpdateBalanceLimit sets the "balance_limit" field to the value that was provided on create.
func (u *CardUpsert) UpdateBalanceLimit() *CardUpsert {
	u.SetExcluded(card.FieldBalanceLimit)
	return u
}

// AddBalanceLimit adds v to the "balance_limit" field.
func (u *CardUpsert) AddBalanceLimit(v float64) *CardUpsert {
	u.Add(card.FieldBalanceLimit, v)
	return u
}

// SetCurrencyCode sets the "currency_code" field.
func (u *CardUpsert) SetCurrencyCode(v string) *CardUpsert {
	u.Set(card.FieldCurrencyCode, v)
	return u
}

// UpdateCurrencyCode sets the "currency_code" field to the value that was provided on create.
func (u *CardUpsert) UpdateCurrencyCode() *CardUpsert {
	u.SetExcluded(card.FieldCurrencyCode)
	return u
}

// SetCardType sets the "card_type" field.
func (u *CardUpsert) SetCardType(v string) *CardUpsert {
	u.Set(card.FieldCardType, v)
	return u
}

// UpdateCardType sets the "card_type" field to the value that was provided on create.
func (u *CardUpsert) UpdateCardType() *CardUpsert {
	u.SetExcluded(card.FieldCardType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Card.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(card.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CardUpsertOne) UpdateNewValues() *CardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(card.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(card.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Card.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CardUpsertOne) Ignore() *CardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CardUpsertOne) DoNothing() *CardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CardCreate.OnConflict
// documentation for more info.
func (u *CardUpsertOne) Update(set func(*CardUpsert)) *CardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CardUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsActive sets the "is_active" field.
func (u *CardUpsertOne) SetIsActive(v bool) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateIsActive() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateIsActive()
	})
}

// SetVersion sets the "version" field.
func (u *CardUpsertOne) SetVersion(v uint32) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *CardUpsertOne) AddVersion(v uint32) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateVersion() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateVersion()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CardUpsertOne) SetUpdatedAt(v time.Time) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateUpdatedAt() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetFinancialAccountID sets the "financial_account_id" field.
func (u *CardUpsertOne) SetFinancialAccountID(v string) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetFinancialAccountID(v)
	})
}

// UpdateFinancialAccountID sets the "financial_account_id" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateFinancialAccountID() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateFinancialAccountID()
	})
}

// ClearFinancialAccountID clears the value of the "financial_account_id" field.
func (u *CardUpsertOne) ClearFinancialAccountID() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.ClearFinancialAccountID()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *CardUpsertOne) SetDisplayName(v string) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateDisplayName() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateDisplayName()
	})
}

// SetBankName sets the "bank_name" field.
func (u *CardUpsertOne) SetBankName(v string) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetBankName(v)
	})
}

// UpdateBankName sets the "bank_name" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateBankName() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateBankName()
	})
}

// ClearBankName clears the value of the "bank_name" field.
func (u *CardUpsertOne) ClearBankName() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.ClearBankName()
	})
}

// SetLastDigits sets the "last_digits" field.
func (u *CardUpsertOne) SetLastDigits(v uint16) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetLastDigits(v)
	})
}

// AddLastDigits adds v to the "last_digits" field.
func (u *CardUpsertOne) AddLastDigits(v uint16) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.AddLastDigits(v)
	})
}

// UpdateLastDigits sets the "last_digits" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateLastDigits() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateLastDigits()
	})
}

// ClearLastDigits clears the value of the "last_digits" field.
func (u *CardUpsertOne) ClearLastDigits() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.ClearLastDigits()
	})
}

// SetBalance sets the "balance" field.
func (u *CardUpsertOne) SetBalance(v float64) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *CardUpsertOne) AddBalance(v float64) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateBalance() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateBalance()
	})
}

// SetBalanceLimit sets the "balance_limit" field.
func (u *CardUpsertOne) SetBalanceLimit(v float64) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetBalanceLimit(v)
	})
}

// AddBalanceLimit adds v to the "balance_limit" field.
func (u *CardUpsertOne) AddBalanceLimit(v float64) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.AddBalanceLimit(v)
	})
}

// UpdateBalanceLimit sets the "balance_limit" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateBalanceLimit() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateBalanceLimit()
	})
}

// SetCurrencyCode sets the "currency_code" field.
func (u *CardUpsertOne) SetCurrencyCode(v string) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetCurrencyCode(v)
	})
}

// UpdateCurrencyCode sets the "currency_code" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateCurrencyCode() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateCurrencyCode()
	})
}

// SetCardType sets the "card_type" field.
func (u *CardUpsertOne) SetCardType(v string) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetCardType(v)
	})
}

// UpdateCardType sets the "card_type" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateCardType() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateCardType()
	})
}

// Exec executes the query.
func (u *CardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CardUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CardUpsertOne.ID is not supported by MySQL driver. Use CardUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CardUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CardCreateBulk is the builder for creating many Card entities in bulk.
type CardCreateBulk struct {
	config
	builders []*CardCreate
	conflict []sql.ConflictOption
}

// Save creates the Card entities in the database.
func (ccb *CardCreateBulk) Save(ctx context.Context) ([]*Card, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Card, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CardCreateBulk) SaveX(ctx context.Context) []*Card {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CardCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CardCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Card.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CardUpsert) {
//			SetIsActive(v+v).
//		}).
//		Exec(ctx)
func (ccb *CardCreateBulk) OnConflict(opts ...sql.ConflictOption) *CardUpsertBulk {
	ccb.conflict = opts
	return &CardUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Card.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CardCreateBulk) OnConflictColumns(columns ...string) *CardUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CardUpsertBulk{
		create: ccb,
	}
}

// CardUpsertBulk is the builder for "upsert"-ing
// a bulk of Card nodes.
type CardUpsertBulk struct {
	create *CardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Card.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(card.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CardUpsertBulk) UpdateNewValues() *CardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(card.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(card.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Card.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CardUpsertBulk) Ignore() *CardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CardUpsertBulk) DoNothing() *CardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CardCreateBulk.OnConflict
// documentation for more info.
func (u *CardUpsertBulk) Update(set func(*CardUpsert)) *CardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CardUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsActive sets the "is_active" field.
func (u *CardUpsertBulk) SetIsActive(v bool) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateIsActive() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateIsActive()
	})
}

// SetVersion sets the "version" field.
func (u *CardUpsertBulk) SetVersion(v uint32) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *CardUpsertBulk) AddVersion(v uint32) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateVersion() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateVersion()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CardUpsertBulk) SetUpdatedAt(v time.Time) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateUpdatedAt() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetFinancialAccountID sets the "financial_account_id" field.
func (u *CardUpsertBulk) SetFinancialAccountID(v string) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetFinancialAccountID(v)
	})
}

// UpdateFinancialAccountID sets the "financial_account_id" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateFinancialAccountID() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateFinancialAccountID()
	})
}

// ClearFinancialAccountID clears the value of the "financial_account_id" field.
func (u *CardUpsertBulk) ClearFinancialAccountID() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.ClearFinancialAccountID()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *CardUpsertBulk) SetDisplayName(v string) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateDisplayName() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateDisplayName()
	})
}

// SetBankName sets the "bank_name" field.
func (u *CardUpsertBulk) SetBankName(v string) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetBankName(v)
	})
}

// UpdateBankName sets the "bank_name" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateBankName() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateBankName()
	})
}

// ClearBankName clears the value of the "bank_name" field.
func (u *CardUpsertBulk) ClearBankName() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.ClearBankName()
	})
}

// SetLastDigits sets the "last_digits" field.
func (u *CardUpsertBulk) SetLastDigits(v uint16) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetLastDigits(v)
	})
}

// AddLastDigits adds v to the "last_digits" field.
func (u *CardUpsertBulk) AddLastDigits(v uint16) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.AddLastDigits(v)
	})
}

// UpdateLastDigits sets the "last_digits" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateLastDigits() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateLastDigits()
	})
}

// ClearLastDigits clears the value of the "last_digits" field.
func (u *CardUpsertBulk) ClearLastDigits() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.ClearLastDigits()
	})
}

// SetBalance sets the "balance" field.
func (u *CardUpsertBulk) SetBalance(v float64) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *CardUpsertBulk) AddBalance(v float64) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateBalance() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateBalance()
	})
}

// SetBalanceLimit sets the "balance_limit" field.
func (u *CardUpsertBulk) SetBalanceLimit(v float64) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetBalanceLimit(v)
	})
}

// AddBalanceLimit adds v to the "balance_limit" field.
func (u *CardUpsertBulk) AddBalanceLimit(v float64) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.AddBalanceLimit(v)
	})
}

// UpdateBalanceLimit sets the "balance_limit" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateBalanceLimit() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateBalanceLimit()
	})
}

// SetCurrencyCode sets the "currency_code" field.
func (u *CardUpsertBulk) SetCurrencyCode(v string) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetCurrencyCode(v)
	})
}

// UpdateCurrencyCode sets the "currency_code" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateCurrencyCode() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateCurrencyCode()
	})
}

// SetCardType sets the "card_type" field.
func (u *CardUpsertBulk) SetCardType(v string) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetCardType(v)
	})
}

// UpdateCardType sets the "card_type" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateCardType() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateCardType()
	})
}

// Exec executes the query.
func (u *CardUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
