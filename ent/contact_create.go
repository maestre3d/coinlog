// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/maestre3d/coinlog/ent/contact"
	"github.com/maestre3d/coinlog/ent/user"
)

// ContactCreate is the builder for creating a Contact entity.
type ContactCreate struct {
	config
	mutation *ContactMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsActive sets the "is_active" field.
func (cc *ContactCreate) SetIsActive(b bool) *ContactCreate {
	cc.mutation.SetIsActive(b)
	return cc
}

// SetVersion sets the "version" field.
func (cc *ContactCreate) SetVersion(u uint32) *ContactCreate {
	cc.mutation.SetVersion(u)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ContactCreate) SetCreatedAt(t time.Time) *ContactCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ContactCreate) SetUpdatedAt(t time.Time) *ContactCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetDisplayName sets the "display_name" field.
func (cc *ContactCreate) SetDisplayName(s string) *ContactCreate {
	cc.mutation.SetDisplayName(s)
	return cc
}

// SetLinkedToUser sets the "linked_to_user" field.
func (cc *ContactCreate) SetLinkedToUser(s string) *ContactCreate {
	cc.mutation.SetLinkedToUser(s)
	return cc
}

// SetNillableLinkedToUser sets the "linked_to_user" field if the given value is not nil.
func (cc *ContactCreate) SetNillableLinkedToUser(s *string) *ContactCreate {
	if s != nil {
		cc.SetLinkedToUser(*s)
	}
	return cc
}

// SetImageURL sets the "image_url" field.
func (cc *ContactCreate) SetImageURL(s string) *ContactCreate {
	cc.mutation.SetImageURL(s)
	return cc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (cc *ContactCreate) SetNillableImageURL(s *string) *ContactCreate {
	if s != nil {
		cc.SetImageURL(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ContactCreate) SetID(s string) *ContactCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cc *ContactCreate) SetOwnerID(id string) *ContactCreate {
	cc.mutation.SetOwnerID(id)
	return cc
}

// SetOwner sets the "owner" edge to the User entity.
func (cc *ContactCreate) SetOwner(u *User) *ContactCreate {
	return cc.SetOwnerID(u.ID)
}

// SetLinkedToID sets the "linked_to" edge to the User entity by ID.
func (cc *ContactCreate) SetLinkedToID(id string) *ContactCreate {
	cc.mutation.SetLinkedToID(id)
	return cc
}

// SetNillableLinkedToID sets the "linked_to" edge to the User entity by ID if the given value is not nil.
func (cc *ContactCreate) SetNillableLinkedToID(id *string) *ContactCreate {
	if id != nil {
		cc = cc.SetLinkedToID(*id)
	}
	return cc
}

// SetLinkedTo sets the "linked_to" edge to the User entity.
func (cc *ContactCreate) SetLinkedTo(u *User) *ContactCreate {
	return cc.SetLinkedToID(u.ID)
}

// Mutation returns the ContactMutation object of the builder.
func (cc *ContactCreate) Mutation() *ContactMutation {
	return cc.mutation
}

// Save creates the Contact in the database.
func (cc *ContactCreate) Save(ctx context.Context) (*Contact, error) {
	return withHooks[*Contact, ContactMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContactCreate) SaveX(ctx context.Context) *Contact {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContactCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContactCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContactCreate) check() error {
	if _, ok := cc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Contact.is_active"`)}
	}
	if _, ok := cc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Contact.version"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Contact.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Contact.updated_at"`)}
	}
	if _, ok := cc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "Contact.display_name"`)}
	}
	if v, ok := cc.mutation.DisplayName(); ok {
		if err := contact.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "Contact.display_name": %w`, err)}
		}
	}
	if v, ok := cc.mutation.ID(); ok {
		if err := contact.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Contact.id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Contact.owner"`)}
	}
	return nil
}

func (cc *ContactCreate) sqlSave(ctx context.Context) (*Contact, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Contact.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ContactCreate) createSpec() (*Contact, *sqlgraph.CreateSpec) {
	var (
		_node = &Contact{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: contact.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: contact.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.IsActive(); ok {
		_spec.SetField(contact.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := cc.mutation.Version(); ok {
		_spec.SetField(contact.FieldVersion, field.TypeUint32, value)
		_node.Version = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(contact.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(contact.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DisplayName(); ok {
		_spec.SetField(contact.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := cc.mutation.ImageURL(); ok {
		_spec.SetField(contact.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if nodes := cc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_contacts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.LinkedToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.LinkedToTable,
			Columns: []string{contact.LinkedToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LinkedToUser = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Contact.Create().
//		SetIsActive(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContactUpsert) {
//			SetIsActive(v+v).
//		}).
//		Exec(ctx)
func (cc *ContactCreate) OnConflict(opts ...sql.ConflictOption) *ContactUpsertOne {
	cc.conflict = opts
	return &ContactUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ContactCreate) OnConflictColumns(columns ...string) *ContactUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ContactUpsertOne{
		create: cc,
	}
}

type (
	// ContactUpsertOne is the builder for "upsert"-ing
	//  one Contact node.
	ContactUpsertOne struct {
		create *ContactCreate
	}

	// ContactUpsert is the "OnConflict" setter.
	ContactUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsActive sets the "is_active" field.
func (u *ContactUpsert) SetIsActive(v bool) *ContactUpsert {
	u.Set(contact.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *ContactUpsert) UpdateIsActive() *ContactUpsert {
	u.SetExcluded(contact.FieldIsActive)
	return u
}

// SetVersion sets the "version" field.
func (u *ContactUpsert) SetVersion(v uint32) *ContactUpsert {
	u.Set(contact.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ContactUpsert) UpdateVersion() *ContactUpsert {
	u.SetExcluded(contact.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *ContactUpsert) AddVersion(v uint32) *ContactUpsert {
	u.Add(contact.FieldVersion, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContactUpsert) SetUpdatedAt(v time.Time) *ContactUpsert {
	u.Set(contact.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContactUpsert) UpdateUpdatedAt() *ContactUpsert {
	u.SetExcluded(contact.FieldUpdatedAt)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *ContactUpsert) SetDisplayName(v string) *ContactUpsert {
	u.Set(contact.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ContactUpsert) UpdateDisplayName() *ContactUpsert {
	u.SetExcluded(contact.FieldDisplayName)
	return u
}

// SetLinkedToUser sets the "linked_to_user" field.
func (u *ContactUpsert) SetLinkedToUser(v string) *ContactUpsert {
	u.Set(contact.FieldLinkedToUser, v)
	return u
}

// UpdateLinkedToUser sets the "linked_to_user" field to the value that was provided on create.
func (u *ContactUpsert) UpdateLinkedToUser() *ContactUpsert {
	u.SetExcluded(contact.FieldLinkedToUser)
	return u
}

// ClearLinkedToUser clears the value of the "linked_to_user" field.
func (u *ContactUpsert) ClearLinkedToUser() *ContactUpsert {
	u.SetNull(contact.FieldLinkedToUser)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *ContactUpsert) SetImageURL(v string) *ContactUpsert {
	u.Set(contact.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *ContactUpsert) UpdateImageURL() *ContactUpsert {
	u.SetExcluded(contact.FieldImageURL)
	return u
}

// ClearImageURL clears the value of the "image_url" field.
func (u *ContactUpsert) ClearImageURL() *ContactUpsert {
	u.SetNull(contact.FieldImageURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(contact.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ContactUpsertOne) UpdateNewValues() *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(contact.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(contact.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Contact.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ContactUpsertOne) Ignore() *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContactUpsertOne) DoNothing() *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContactCreate.OnConflict
// documentation for more info.
func (u *ContactUpsertOne) Update(set func(*ContactUpsert)) *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsActive sets the "is_active" field.
func (u *ContactUpsertOne) SetIsActive(v bool) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateIsActive() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateIsActive()
	})
}

// SetVersion sets the "version" field.
func (u *ContactUpsertOne) SetVersion(v uint32) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *ContactUpsertOne) AddVersion(v uint32) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateVersion() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateVersion()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContactUpsertOne) SetUpdatedAt(v time.Time) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateUpdatedAt() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *ContactUpsertOne) SetDisplayName(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateDisplayName() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateDisplayName()
	})
}

// SetLinkedToUser sets the "linked_to_user" field.
func (u *ContactUpsertOne) SetLinkedToUser(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetLinkedToUser(v)
	})
}

// UpdateLinkedToUser sets the "linked_to_user" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateLinkedToUser() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateLinkedToUser()
	})
}

// ClearLinkedToUser clears the value of the "linked_to_user" field.
func (u *ContactUpsertOne) ClearLinkedToUser() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearLinkedToUser()
	})
}

// SetImageURL sets the "image_url" field.
func (u *ContactUpsertOne) SetImageURL(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateImageURL() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *ContactUpsertOne) ClearImageURL() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearImageURL()
	})
}

// Exec executes the query.
func (u *ContactUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContactCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContactUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ContactUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ContactUpsertOne.ID is not supported by MySQL driver. Use ContactUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ContactUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ContactCreateBulk is the builder for creating many Contact entities in bulk.
type ContactCreateBulk struct {
	config
	builders []*ContactCreate
	conflict []sql.ConflictOption
}

// Save creates the Contact entities in the database.
func (ccb *ContactCreateBulk) Save(ctx context.Context) ([]*Contact, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Contact, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContactCreateBulk) SaveX(ctx context.Context) []*Contact {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContactCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContactCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Contact.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContactUpsert) {
//			SetIsActive(v+v).
//		}).
//		Exec(ctx)
func (ccb *ContactCreateBulk) OnConflict(opts ...sql.ConflictOption) *ContactUpsertBulk {
	ccb.conflict = opts
	return &ContactUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ContactCreateBulk) OnConflictColumns(columns ...string) *ContactUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ContactUpsertBulk{
		create: ccb,
	}
}

// ContactUpsertBulk is the builder for "upsert"-ing
// a bulk of Contact nodes.
type ContactUpsertBulk struct {
	create *ContactCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(contact.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ContactUpsertBulk) UpdateNewValues() *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(contact.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(contact.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ContactUpsertBulk) Ignore() *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContactUpsertBulk) DoNothing() *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContactCreateBulk.OnConflict
// documentation for more info.
func (u *ContactUpsertBulk) Update(set func(*ContactUpsert)) *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsActive sets the "is_active" field.
func (u *ContactUpsertBulk) SetIsActive(v bool) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateIsActive() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateIsActive()
	})
}

// SetVersion sets the "version" field.
func (u *ContactUpsertBulk) SetVersion(v uint32) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *ContactUpsertBulk) AddVersion(v uint32) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateVersion() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateVersion()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContactUpsertBulk) SetUpdatedAt(v time.Time) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateUpdatedAt() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *ContactUpsertBulk) SetDisplayName(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateDisplayName() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateDisplayName()
	})
}

// SetLinkedToUser sets the "linked_to_user" field.
func (u *ContactUpsertBulk) SetLinkedToUser(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetLinkedToUser(v)
	})
}

// UpdateLinkedToUser sets the "linked_to_user" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateLinkedToUser() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateLinkedToUser()
	})
}

// ClearLinkedToUser clears the value of the "linked_to_user" field.
func (u *ContactUpsertBulk) ClearLinkedToUser() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearLinkedToUser()
	})
}

// SetImageURL sets the "image_url" field.
func (u *ContactUpsertBulk) SetImageURL(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateImageURL() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *ContactUpsertBulk) ClearImageURL() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearImageURL()
	})
}

// Exec executes the query.
func (u *ContactUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ContactCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContactCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContactUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
