// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/maestre3d/coinlog/ent/card"
	"github.com/maestre3d/coinlog/ent/financialaccount"
	"github.com/maestre3d/coinlog/ent/predicate"
)

// FinancialAccountUpdate is the builder for updating FinancialAccount entities.
type FinancialAccountUpdate struct {
	config
	hooks    []Hook
	mutation *FinancialAccountMutation
}

// Where appends a list predicates to the FinancialAccountUpdate builder.
func (fau *FinancialAccountUpdate) Where(ps ...predicate.FinancialAccount) *FinancialAccountUpdate {
	fau.mutation.Where(ps...)
	return fau
}

// SetIsActive sets the "is_active" field.
func (fau *FinancialAccountUpdate) SetIsActive(b bool) *FinancialAccountUpdate {
	fau.mutation.SetIsActive(b)
	return fau
}

// SetVersion sets the "version" field.
func (fau *FinancialAccountUpdate) SetVersion(u uint32) *FinancialAccountUpdate {
	fau.mutation.ResetVersion()
	fau.mutation.SetVersion(u)
	return fau
}

// AddVersion adds u to the "version" field.
func (fau *FinancialAccountUpdate) AddVersion(u int32) *FinancialAccountUpdate {
	fau.mutation.AddVersion(u)
	return fau
}

// SetUpdatedAt sets the "updated_at" field.
func (fau *FinancialAccountUpdate) SetUpdatedAt(t time.Time) *FinancialAccountUpdate {
	fau.mutation.SetUpdatedAt(t)
	return fau
}

// SetDisplayName sets the "display_name" field.
func (fau *FinancialAccountUpdate) SetDisplayName(s string) *FinancialAccountUpdate {
	fau.mutation.SetDisplayName(s)
	return fau
}

// SetBankName sets the "bank_name" field.
func (fau *FinancialAccountUpdate) SetBankName(s string) *FinancialAccountUpdate {
	fau.mutation.SetBankName(s)
	return fau
}

// SetNillableBankName sets the "bank_name" field if the given value is not nil.
func (fau *FinancialAccountUpdate) SetNillableBankName(s *string) *FinancialAccountUpdate {
	if s != nil {
		fau.SetBankName(*s)
	}
	return fau
}

// ClearBankName clears the value of the "bank_name" field.
func (fau *FinancialAccountUpdate) ClearBankName() *FinancialAccountUpdate {
	fau.mutation.ClearBankName()
	return fau
}

// SetAccountType sets the "account_type" field.
func (fau *FinancialAccountUpdate) SetAccountType(s string) *FinancialAccountUpdate {
	fau.mutation.SetAccountType(s)
	return fau
}

// SetBalance sets the "balance" field.
func (fau *FinancialAccountUpdate) SetBalance(f float64) *FinancialAccountUpdate {
	fau.mutation.ResetBalance()
	fau.mutation.SetBalance(f)
	return fau
}

// AddBalance adds f to the "balance" field.
func (fau *FinancialAccountUpdate) AddBalance(f float64) *FinancialAccountUpdate {
	fau.mutation.AddBalance(f)
	return fau
}

// SetCurrencyCode sets the "currency_code" field.
func (fau *FinancialAccountUpdate) SetCurrencyCode(s string) *FinancialAccountUpdate {
	fau.mutation.SetCurrencyCode(s)
	return fau
}

// AddCardIDs adds the "cards" edge to the Card entity by IDs.
func (fau *FinancialAccountUpdate) AddCardIDs(ids ...string) *FinancialAccountUpdate {
	fau.mutation.AddCardIDs(ids...)
	return fau
}

// AddCards adds the "cards" edges to the Card entity.
func (fau *FinancialAccountUpdate) AddCards(c ...*Card) *FinancialAccountUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fau.AddCardIDs(ids...)
}

// Mutation returns the FinancialAccountMutation object of the builder.
func (fau *FinancialAccountUpdate) Mutation() *FinancialAccountMutation {
	return fau.mutation
}

// ClearCards clears all "cards" edges to the Card entity.
func (fau *FinancialAccountUpdate) ClearCards() *FinancialAccountUpdate {
	fau.mutation.ClearCards()
	return fau
}

// RemoveCardIDs removes the "cards" edge to Card entities by IDs.
func (fau *FinancialAccountUpdate) RemoveCardIDs(ids ...string) *FinancialAccountUpdate {
	fau.mutation.RemoveCardIDs(ids...)
	return fau
}

// RemoveCards removes "cards" edges to Card entities.
func (fau *FinancialAccountUpdate) RemoveCards(c ...*Card) *FinancialAccountUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fau.RemoveCardIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fau *FinancialAccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, FinancialAccountMutation](ctx, fau.sqlSave, fau.mutation, fau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fau *FinancialAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := fau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fau *FinancialAccountUpdate) Exec(ctx context.Context) error {
	_, err := fau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fau *FinancialAccountUpdate) ExecX(ctx context.Context) {
	if err := fau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fau *FinancialAccountUpdate) check() error {
	if v, ok := fau.mutation.DisplayName(); ok {
		if err := financialaccount.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "FinancialAccount.display_name": %w`, err)}
		}
	}
	if v, ok := fau.mutation.AccountType(); ok {
		if err := financialaccount.AccountTypeValidator(v); err != nil {
			return &ValidationError{Name: "account_type", err: fmt.Errorf(`ent: validator failed for field "FinancialAccount.account_type": %w`, err)}
		}
	}
	if v, ok := fau.mutation.CurrencyCode(); ok {
		if err := financialaccount.CurrencyCodeValidator(v); err != nil {
			return &ValidationError{Name: "currency_code", err: fmt.Errorf(`ent: validator failed for field "FinancialAccount.currency_code": %w`, err)}
		}
	}
	if _, ok := fau.mutation.OwnerID(); fau.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FinancialAccount.owner"`)
	}
	return nil
}

func (fau *FinancialAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fau.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   financialaccount.Table,
			Columns: financialaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: financialaccount.FieldID,
			},
		},
	}
	if ps := fau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fau.mutation.IsActive(); ok {
		_spec.SetField(financialaccount.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := fau.mutation.Version(); ok {
		_spec.SetField(financialaccount.FieldVersion, field.TypeUint32, value)
	}
	if value, ok := fau.mutation.AddedVersion(); ok {
		_spec.AddField(financialaccount.FieldVersion, field.TypeUint32, value)
	}
	if value, ok := fau.mutation.UpdatedAt(); ok {
		_spec.SetField(financialaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fau.mutation.DisplayName(); ok {
		_spec.SetField(financialaccount.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := fau.mutation.BankName(); ok {
		_spec.SetField(financialaccount.FieldBankName, field.TypeString, value)
	}
	if fau.mutation.BankNameCleared() {
		_spec.ClearField(financialaccount.FieldBankName, field.TypeString)
	}
	if value, ok := fau.mutation.AccountType(); ok {
		_spec.SetField(financialaccount.FieldAccountType, field.TypeString, value)
	}
	if value, ok := fau.mutation.Balance(); ok {
		_spec.SetField(financialaccount.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := fau.mutation.AddedBalance(); ok {
		_spec.AddField(financialaccount.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := fau.mutation.CurrencyCode(); ok {
		_spec.SetField(financialaccount.FieldCurrencyCode, field.TypeString, value)
	}
	if fau.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   financialaccount.CardsTable,
			Columns: []string{financialaccount.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fau.mutation.RemovedCardsIDs(); len(nodes) > 0 && !fau.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   financialaccount.CardsTable,
			Columns: []string{financialaccount.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fau.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   financialaccount.CardsTable,
			Columns: []string{financialaccount.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{financialaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fau.mutation.done = true
	return n, nil
}

// FinancialAccountUpdateOne is the builder for updating a single FinancialAccount entity.
type FinancialAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FinancialAccountMutation
}

// SetIsActive sets the "is_active" field.
func (fauo *FinancialAccountUpdateOne) SetIsActive(b bool) *FinancialAccountUpdateOne {
	fauo.mutation.SetIsActive(b)
	return fauo
}

// SetVersion sets the "version" field.
func (fauo *FinancialAccountUpdateOne) SetVersion(u uint32) *FinancialAccountUpdateOne {
	fauo.mutation.ResetVersion()
	fauo.mutation.SetVersion(u)
	return fauo
}

// AddVersion adds u to the "version" field.
func (fauo *FinancialAccountUpdateOne) AddVersion(u int32) *FinancialAccountUpdateOne {
	fauo.mutation.AddVersion(u)
	return fauo
}

// SetUpdatedAt sets the "updated_at" field.
func (fauo *FinancialAccountUpdateOne) SetUpdatedAt(t time.Time) *FinancialAccountUpdateOne {
	fauo.mutation.SetUpdatedAt(t)
	return fauo
}

// SetDisplayName sets the "display_name" field.
func (fauo *FinancialAccountUpdateOne) SetDisplayName(s string) *FinancialAccountUpdateOne {
	fauo.mutation.SetDisplayName(s)
	return fauo
}

// SetBankName sets the "bank_name" field.
func (fauo *FinancialAccountUpdateOne) SetBankName(s string) *FinancialAccountUpdateOne {
	fauo.mutation.SetBankName(s)
	return fauo
}

// SetNillableBankName sets the "bank_name" field if the given value is not nil.
func (fauo *FinancialAccountUpdateOne) SetNillableBankName(s *string) *FinancialAccountUpdateOne {
	if s != nil {
		fauo.SetBankName(*s)
	}
	return fauo
}

// ClearBankName clears the value of the "bank_name" field.
func (fauo *FinancialAccountUpdateOne) ClearBankName() *FinancialAccountUpdateOne {
	fauo.mutation.ClearBankName()
	return fauo
}

// SetAccountType sets the "account_type" field.
func (fauo *FinancialAccountUpdateOne) SetAccountType(s string) *FinancialAccountUpdateOne {
	fauo.mutation.SetAccountType(s)
	return fauo
}

// SetBalance sets the "balance" field.
func (fauo *FinancialAccountUpdateOne) SetBalance(f float64) *FinancialAccountUpdateOne {
	fauo.mutation.ResetBalance()
	fauo.mutation.SetBalance(f)
	return fauo
}

// AddBalance adds f to the "balance" field.
func (fauo *FinancialAccountUpdateOne) AddBalance(f float64) *FinancialAccountUpdateOne {
	fauo.mutation.AddBalance(f)
	return fauo
}

// SetCurrencyCode sets the "currency_code" field.
func (fauo *FinancialAccountUpdateOne) SetCurrencyCode(s string) *FinancialAccountUpdateOne {
	fauo.mutation.SetCurrencyCode(s)
	return fauo
}

// AddCardIDs adds the "cards" edge to the Card entity by IDs.
func (fauo *FinancialAccountUpdateOne) AddCardIDs(ids ...string) *FinancialAccountUpdateOne {
	fauo.mutation.AddCardIDs(ids...)
	return fauo
}

// AddCards adds the "cards" edges to the Card entity.
func (fauo *FinancialAccountUpdateOne) AddCards(c ...*Card) *FinancialAccountUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fauo.AddCardIDs(ids...)
}

// Mutation returns the FinancialAccountMutation object of the builder.
func (fauo *FinancialAccountUpdateOne) Mutation() *FinancialAccountMutation {
	return fauo.mutation
}

// ClearCards clears all "cards" edges to the Card entity.
func (fauo *FinancialAccountUpdateOne) ClearCards() *FinancialAccountUpdateOne {
	fauo.mutation.ClearCards()
	return fauo
}

// RemoveCardIDs removes the "cards" edge to Card entities by IDs.
func (fauo *FinancialAccountUpdateOne) RemoveCardIDs(ids ...string) *FinancialAccountUpdateOne {
	fauo.mutation.RemoveCardIDs(ids...)
	return fauo
}

// RemoveCards removes "cards" edges to Card entities.
func (fauo *FinancialAccountUpdateOne) RemoveCards(c ...*Card) *FinancialAccountUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fauo.RemoveCardIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fauo *FinancialAccountUpdateOne) Select(field string, fields ...string) *FinancialAccountUpdateOne {
	fauo.fields = append([]string{field}, fields...)
	return fauo
}

// Save executes the query and returns the updated FinancialAccount entity.
func (fauo *FinancialAccountUpdateOne) Save(ctx context.Context) (*FinancialAccount, error) {
	return withHooks[*FinancialAccount, FinancialAccountMutation](ctx, fauo.sqlSave, fauo.mutation, fauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fauo *FinancialAccountUpdateOne) SaveX(ctx context.Context) *FinancialAccount {
	node, err := fauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fauo *FinancialAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := fauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fauo *FinancialAccountUpdateOne) ExecX(ctx context.Context) {
	if err := fauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fauo *FinancialAccountUpdateOne) check() error {
	if v, ok := fauo.mutation.DisplayName(); ok {
		if err := financialaccount.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "FinancialAccount.display_name": %w`, err)}
		}
	}
	if v, ok := fauo.mutation.AccountType(); ok {
		if err := financialaccount.AccountTypeValidator(v); err != nil {
			return &ValidationError{Name: "account_type", err: fmt.Errorf(`ent: validator failed for field "FinancialAccount.account_type": %w`, err)}
		}
	}
	if v, ok := fauo.mutation.CurrencyCode(); ok {
		if err := financialaccount.CurrencyCodeValidator(v); err != nil {
			return &ValidationError{Name: "currency_code", err: fmt.Errorf(`ent: validator failed for field "FinancialAccount.currency_code": %w`, err)}
		}
	}
	if _, ok := fauo.mutation.OwnerID(); fauo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FinancialAccount.owner"`)
	}
	return nil
}

func (fauo *FinancialAccountUpdateOne) sqlSave(ctx context.Context) (_node *FinancialAccount, err error) {
	if err := fauo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   financialaccount.Table,
			Columns: financialaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: financialaccount.FieldID,
			},
		},
	}
	id, ok := fauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FinancialAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, financialaccount.FieldID)
		for _, f := range fields {
			if !financialaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != financialaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fauo.mutation.IsActive(); ok {
		_spec.SetField(financialaccount.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := fauo.mutation.Version(); ok {
		_spec.SetField(financialaccount.FieldVersion, field.TypeUint32, value)
	}
	if value, ok := fauo.mutation.AddedVersion(); ok {
		_spec.AddField(financialaccount.FieldVersion, field.TypeUint32, value)
	}
	if value, ok := fauo.mutation.UpdatedAt(); ok {
		_spec.SetField(financialaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fauo.mutation.DisplayName(); ok {
		_spec.SetField(financialaccount.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := fauo.mutation.BankName(); ok {
		_spec.SetField(financialaccount.FieldBankName, field.TypeString, value)
	}
	if fauo.mutation.BankNameCleared() {
		_spec.ClearField(financialaccount.FieldBankName, field.TypeString)
	}
	if value, ok := fauo.mutation.AccountType(); ok {
		_spec.SetField(financialaccount.FieldAccountType, field.TypeString, value)
	}
	if value, ok := fauo.mutation.Balance(); ok {
		_spec.SetField(financialaccount.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := fauo.mutation.AddedBalance(); ok {
		_spec.AddField(financialaccount.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := fauo.mutation.CurrencyCode(); ok {
		_spec.SetField(financialaccount.FieldCurrencyCode, field.TypeString, value)
	}
	if fauo.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   financialaccount.CardsTable,
			Columns: []string{financialaccount.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fauo.mutation.RemovedCardsIDs(); len(nodes) > 0 && !fauo.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   financialaccount.CardsTable,
			Columns: []string{financialaccount.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fauo.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   financialaccount.CardsTable,
			Columns: []string{financialaccount.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FinancialAccount{config: fauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{financialaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fauo.mutation.done = true
	return _node, nil
}
