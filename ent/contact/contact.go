// Code generated by ent, DO NOT EDIT.

package contact

const (
	// Label holds the string label denoting the contact type in the database.
	Label = "contact"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldLinkedToUser holds the string denoting the linked_to_user field in the database.
	FieldLinkedToUser = "linked_to_user"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeLinkedTo holds the string denoting the linked_to edge name in mutations.
	EdgeLinkedTo = "linked_to"
	// Table holds the table name of the contact in the database.
	Table = "contacts"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "contacts"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_contacts"
	// LinkedToTable is the table that holds the linked_to relation/edge.
	LinkedToTable = "contacts"
	// LinkedToInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	LinkedToInverseTable = "users"
	// LinkedToColumn is the table column denoting the linked_to relation/edge.
	LinkedToColumn = "linked_to_user"
)

// Columns holds all SQL columns for contact fields.
var Columns = []string{
	FieldID,
	FieldIsActive,
	FieldVersion,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDisplayName,
	FieldLinkedToUser,
	FieldImageURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "contacts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_contacts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
