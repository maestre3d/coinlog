// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/maestre3d/coinlog/ent/card"
	"github.com/maestre3d/coinlog/ent/financialaccount"
	"github.com/maestre3d/coinlog/ent/user"
)

// Card is the model entity for the Card schema.
type Card struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// Version holds the value of the "version" field.
	Version uint32 `json:"version,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// FinancialAccountID holds the value of the "financial_account_id" field.
	FinancialAccountID string `json:"financial_account_id,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// BankName holds the value of the "bank_name" field.
	BankName string `json:"bank_name,omitempty"`
	// LastDigits holds the value of the "last_digits" field.
	LastDigits uint16 `json:"last_digits,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance float64 `json:"balance,omitempty"`
	// BalanceLimit holds the value of the "balance_limit" field.
	BalanceLimit float64 `json:"balance_limit,omitempty"`
	// CurrencyCode holds the value of the "currency_code" field.
	CurrencyCode string `json:"currency_code,omitempty"`
	// CardType holds the value of the "card_type" field.
	CardType string `json:"card_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CardQuery when eager-loading is set.
	Edges      CardEdges `json:"edges"`
	user_cards *string
}

// CardEdges holds the relations/edges for other nodes in the graph.
type CardEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// FinancialAccount holds the value of the financial_account edge.
	FinancialAccount *FinancialAccount `json:"financial_account,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CardEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// FinancialAccountOrErr returns the FinancialAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CardEdges) FinancialAccountOrErr() (*FinancialAccount, error) {
	if e.loadedTypes[1] {
		if e.FinancialAccount == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: financialaccount.Label}
		}
		return e.FinancialAccount, nil
	}
	return nil, &NotLoadedError{edge: "financial_account"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Card) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case card.FieldIsActive:
			values[i] = new(sql.NullBool)
		case card.FieldBalance, card.FieldBalanceLimit:
			values[i] = new(sql.NullFloat64)
		case card.FieldVersion, card.FieldLastDigits:
			values[i] = new(sql.NullInt64)
		case card.FieldID, card.FieldFinancialAccountID, card.FieldDisplayName, card.FieldBankName, card.FieldCurrencyCode, card.FieldCardType:
			values[i] = new(sql.NullString)
		case card.FieldCreatedAt, card.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case card.ForeignKeys[0]: // user_cards
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Card", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Card fields.
func (c *Card) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case card.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case card.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				c.IsActive = value.Bool
			}
		case card.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				c.Version = uint32(value.Int64)
			}
		case card.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case card.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case card.FieldFinancialAccountID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field financial_account_id", values[i])
			} else if value.Valid {
				c.FinancialAccountID = value.String
			}
		case card.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				c.DisplayName = value.String
			}
		case card.FieldBankName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_name", values[i])
			} else if value.Valid {
				c.BankName = value.String
			}
		case card.FieldLastDigits:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_digits", values[i])
			} else if value.Valid {
				c.LastDigits = uint16(value.Int64)
			}
		case card.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				c.Balance = value.Float64
			}
		case card.FieldBalanceLimit:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance_limit", values[i])
			} else if value.Valid {
				c.BalanceLimit = value.Float64
			}
		case card.FieldCurrencyCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency_code", values[i])
			} else if value.Valid {
				c.CurrencyCode = value.String
			}
		case card.FieldCardType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field card_type", values[i])
			} else if value.Valid {
				c.CardType = value.String
			}
		case card.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_cards", values[i])
			} else if value.Valid {
				c.user_cards = new(string)
				*c.user_cards = value.String
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Card entity.
func (c *Card) QueryUser() *UserQuery {
	return (&CardClient{config: c.config}).QueryUser(c)
}

// QueryFinancialAccount queries the "financial_account" edge of the Card entity.
func (c *Card) QueryFinancialAccount() *FinancialAccountQuery {
	return (&CardClient{config: c.config}).QueryFinancialAccount(c)
}

// Update returns a builder for updating this Card.
// Note that you need to call Card.Unwrap() before calling this method if this Card
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Card) Update() *CardUpdateOne {
	return (&CardClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Card entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Card) Unwrap() *Card {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Card is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Card) String() string {
	var builder strings.Builder
	builder.WriteString("Card(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", c.IsActive))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", c.Version))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("financial_account_id=")
	builder.WriteString(c.FinancialAccountID)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(c.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("bank_name=")
	builder.WriteString(c.BankName)
	builder.WriteString(", ")
	builder.WriteString("last_digits=")
	builder.WriteString(fmt.Sprintf("%v", c.LastDigits))
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", c.Balance))
	builder.WriteString(", ")
	builder.WriteString("balance_limit=")
	builder.WriteString(fmt.Sprintf("%v", c.BalanceLimit))
	builder.WriteString(", ")
	builder.WriteString("currency_code=")
	builder.WriteString(c.CurrencyCode)
	builder.WriteString(", ")
	builder.WriteString("card_type=")
	builder.WriteString(c.CardType)
	builder.WriteByte(')')
	return builder.String()
}

// Cards is a parsable slice of Card.
type Cards []*Card

func (c Cards) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
