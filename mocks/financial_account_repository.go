// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	financialaccount "github.com/maestre3d/coinlog/domain/financialaccount"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/maestre3d/coinlog/storage"
)

// FinancialAccountRepository is an autogenerated mock type for the Repository type
type FinancialAccountRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, cr
func (_m *FinancialAccountRepository) Find(ctx context.Context, cr storage.Criteria) ([]financialaccount.FinancialAccount, storage.PageToken, error) {
	ret := _m.Called(ctx, cr)

	var r0 []financialaccount.FinancialAccount
	if rf, ok := ret.Get(0).(func(context.Context, storage.Criteria) []financialaccount.FinancialAccount); ok {
		r0 = rf(ctx, cr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]financialaccount.FinancialAccount)
		}
	}

	var r1 storage.PageToken
	if rf, ok := ret.Get(1).(func(context.Context, storage.Criteria) storage.PageToken); ok {
		r1 = rf(ctx, cr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(storage.PageToken)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, storage.Criteria) error); ok {
		r2 = rf(ctx, cr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: ctx, id
func (_m *FinancialAccountRepository) Get(ctx context.Context, id string) (*financialaccount.FinancialAccount, error) {
	ret := _m.Called(ctx, id)

	var r0 *financialaccount.FinancialAccount
	if rf, ok := ret.Get(0).(func(context.Context, string) *financialaccount.FinancialAccount); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*financialaccount.FinancialAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, id
func (_m *FinancialAccountRepository) Remove(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, v
func (_m *FinancialAccountRepository) Save(ctx context.Context, v financialaccount.FinancialAccount) error {
	ret := _m.Called(ctx, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, financialaccount.FinancialAccount) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewFinancialAccountRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewFinancialAccountRepository creates a new instance of FinancialAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFinancialAccountRepository(t mockConstructorTestingTNewFinancialAccountRepository) *FinancialAccountRepository {
	mock := &FinancialAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
