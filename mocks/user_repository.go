// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	storage "github.com/maestre3d/coinlog/storage"
	mock "github.com/stretchr/testify/mock"

	user "github.com/maestre3d/coinlog/domain/user"
)

// UserRepository is an autogenerated mock type for the Repository type
type UserRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, cr
func (_m *UserRepository) Find(ctx context.Context, cr storage.Criteria) ([]user.User, storage.PageToken, error) {
	ret := _m.Called(ctx, cr)

	var r0 []user.User
	if rf, ok := ret.Get(0).(func(context.Context, storage.Criteria) []user.User); ok {
		r0 = rf(ctx, cr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	var r1 storage.PageToken
	if rf, ok := ret.Get(1).(func(context.Context, storage.Criteria) storage.PageToken); ok {
		r1 = rf(ctx, cr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(storage.PageToken)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, storage.Criteria) error); ok {
		r2 = rf(ctx, cr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: ctx, id
func (_m *UserRepository) Get(ctx context.Context, id string) (*user.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *user.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *user.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, id
func (_m *UserRepository) Remove(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, v
func (_m *UserRepository) Save(ctx context.Context, v user.User) error {
	ret := _m.Called(ctx, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.User) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
