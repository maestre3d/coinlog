// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	contact "github.com/maestre3d/coinlog/domain/contact"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/maestre3d/coinlog/storage"
)

// ContactRepository is an autogenerated mock type for the Repository type
type ContactRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, cr
func (_m *ContactRepository) Find(ctx context.Context, cr storage.Criteria) ([]contact.Contact, storage.PageToken, error) {
	ret := _m.Called(ctx, cr)

	var r0 []contact.Contact
	if rf, ok := ret.Get(0).(func(context.Context, storage.Criteria) []contact.Contact); ok {
		r0 = rf(ctx, cr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]contact.Contact)
		}
	}

	var r1 storage.PageToken
	if rf, ok := ret.Get(1).(func(context.Context, storage.Criteria) storage.PageToken); ok {
		r1 = rf(ctx, cr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(storage.PageToken)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, storage.Criteria) error); ok {
		r2 = rf(ctx, cr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: ctx, id
func (_m *ContactRepository) Get(ctx context.Context, id string) (*contact.Contact, error) {
	ret := _m.Called(ctx, id)

	var r0 *contact.Contact
	if rf, ok := ret.Get(0).(func(context.Context, string) *contact.Contact); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contact.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserContacts provides a mock function with given fields: ctx, criteria, userID
func (_m *ContactRepository) GetUserContacts(ctx context.Context, criteria storage.Criteria, userID string) ([]contact.Contact, storage.PageToken, error) {
	ret := _m.Called(ctx, criteria, userID)

	var r0 []contact.Contact
	if rf, ok := ret.Get(0).(func(context.Context, storage.Criteria, string) []contact.Contact); ok {
		r0 = rf(ctx, criteria, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]contact.Contact)
		}
	}

	var r1 storage.PageToken
	if rf, ok := ret.Get(1).(func(context.Context, storage.Criteria, string) storage.PageToken); ok {
		r1 = rf(ctx, criteria, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(storage.PageToken)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, storage.Criteria, string) error); ok {
		r2 = rf(ctx, criteria, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Remove provides a mock function with given fields: ctx, id
func (_m *ContactRepository) Remove(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, v
func (_m *ContactRepository) Save(ctx context.Context, v contact.Contact) error {
	ret := _m.Called(ctx, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, contact.Contact) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewContactRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewContactRepository creates a new instance of ContactRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContactRepository(t mockConstructorTestingTNewContactRepository) *ContactRepository {
	mock := &ContactRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
