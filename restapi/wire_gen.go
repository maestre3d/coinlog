// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package restapi

import (
	"github.com/google/wire"
	"github.com/maestre3d/coinlog/appservice"
	"github.com/maestre3d/coinlog/configuration"
	"github.com/maestre3d/coinlog/controller"
	"github.com/maestre3d/coinlog/persistence"
	"github.com/maestre3d/coinlog/repository"
)

// Injectors from wire.go:

func NewCoinlogHTTP() (*CoinlogHTTP, func(), error) {
	application := configuration.NewApplication()
	serverHTTP := configuration.NewServerHTTP()
	databaseSQL := configuration.NewDatabaseSQL()
	restapiCoinlogHTTPConfig := coinlogHTTPConfig{
		Application: application,
		Server:      serverHTTP,
		Database:    databaseSQL,
	}
	livenessHTTP := controller.NewLivenessHTTP()
	userSQL := persistence.NewUserSQL()
	user := appservice.NewUser(userSQL)
	userHTTP := controller.NewUserHTTP(user)
	restapiHttpCtrl := httpCtrl{
		Liveness: livenessHTTP,
		User:     userHTTP,
	}
	muxHTTP := provideHttpRoutes(restapiCoinlogHTTPConfig, restapiHttpCtrl)
	echo := controller.NewEcho(serverHTTP, muxHTTP)
	coinlogHTTP := &CoinlogHTTP{
		Config: restapiCoinlogHTTPConfig,
		Echo:   echo,
	}
	return coinlogHTTP, func() {
	}, nil
}

// wire.go:

// Holds all controllers for HTTP protocol, wire auto-binds inner deps.
type httpCtrl struct {
	Liveness controller.LivenessHTTP
	User     controller.UserHTTP
}

var kernelCfgSet = wire.NewSet(configuration.NewApplication, configuration.NewServerHTTP, configuration.NewDatabaseSQL, wire.Struct(new(coinlogHTTPConfig), "*"))

var userSet = wire.NewSet(wire.Bind(new(repository.User), new(persistence.UserSQL)), persistence.NewUserSQL, appservice.NewUser, controller.NewUserHTTP)

func provideHttpRoutes(cfg coinlogHTTPConfig, ctrls httpCtrl) *controller.MuxHTTP {
	mux := controller.NewMux(cfg.Application, cfg.Server)

	mux.Add(ctrls.Liveness, ctrls.User)
	return mux
}
